= 今後の課題
今回確認できなかったこと、今後やってみたいことをまとめました。

== テスト
Rustを触ったからにはテスト機能を使わないのは宝の持ち腐れと感じています。

実際の組込み製品開発の現場ではユニットテストに加えてカバレッジ計測が必要になるシーンも多いと思います。

Webを検索していたらRustでもカバレッジ計測できるツールがあるようなので興味深いです。
//footnote[coverage_link_1][https://tech-blog.optim.co.jp/entry/2019/02/19/173000]
//footnote[coverage_link_2][https://qiita.com/dalance/items/69e18fe300760f8d7de0]

 * Rustのカバレッジを極める@<fn>{coverage_link_1}
 * Rustの新しいコードカバレッジ/Source-based code coverage@<fn>{coverage_link_2}

私は試していませんがユニットテスト + カバレッジ計測ができれば製品開発でも有用と思いました。


== C/C++とRustの共存
実際の組込み製品開発現場では過去のソースコードを流用する派生開発のスタイルも多いと思います。
新規開発より派生開発の方が多いと思います。
いきなりすべてのコードをRustで実装する機会も少ないと思いますので、少しずつでもRustに置き換えできるとよいと思いました。

派生開発ではじめてRustを適用する場合、新しいロジックの開発はRustで、
既存C/C++ソースコードは流用するという場合があるかと思います。
その場合、

 * RustからC/C++から呼び出す
 * C/C++からRustを呼び出す

のようにC/C++とRustの連携が必要になると思います。

今回はRustのみでしたが今後は既存ソースコードとの共存のパターンも試してみたいと考えています。


== ドキュメント生成
ドキュメント生成機能も素晴らしいと思いました。
HTMLドキュメント出力に加えて、ドキュメント内に記述されたテストも実行してくれるとか・・・。

この機能で開発現場でありがちなソースコードとドキュメントの内容が剥離する、ということも防止できますね。

